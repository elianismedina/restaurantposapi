generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branches  Branch[]
  users     User[]
}

model Branch {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  phone        String?
  restaurantId Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  customers    Customer[]
  products     Product[]
  transactions Transaction[]
  users        User[]
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  password     String
  role         String
  createdAt    DateTime       @default(now())
  email        String
  restaurantId Int?
  branchId     Int?
  updatedAt    DateTime       @updatedAt
  CashRegister CashRegister[]
  DailyClosing DailyClosing[]
  transactions Transaction[]
  branch       Branch?        @relation(fields: [branchId], references: [id])
  restaurant   Restaurant?    @relation(fields: [restaurantId], references: [id])
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String
  sku              String            @unique
  price            Float
  stock            Int
  branchId         Int
  branch           Branch            @relation(fields: [branchId], references: [id])
  categories       Category[]        @relation("ProductCategories") // Add this field
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  transactionItems TransactionItem[]
}

model Customer {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phone        String?
  address      String?
  preferences  Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  branchId     Int
  branch       Branch        @relation(fields: [branchId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          Int
  customerId      Int?
  total           Float
  paymentMethod   String
  paymentStatus   String?
  createdAt       DateTime          @default(now())
  branchId        Int
  cashTransaction CashTransaction?
  branch          Branch            @relation(fields: [branchId], references: [id])
  customer        Customer?         @relation(fields: [customerId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  items           TransactionItem[]
}

model TransactionItem {
  id            Int         @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  price         Float
  product       Product     @relation(fields: [productId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model CashRegister {
  id               Int               @id @default(autoincrement())
  userId           Int
  balance          Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  cashTransactions CashTransaction[]
  dailyClosings    DailyClosing[]
}

model CashTransaction {
  id             Int          @id @default(autoincrement())
  cashRegisterId Int
  transactionId  Int          @unique
  amountTendered Float
  changeGiven    Float
  createdAt      DateTime     @default(now())
  cashRegister   CashRegister @relation(fields: [cashRegisterId], references: [id])
  transaction    Transaction  @relation(fields: [transactionId], references: [id])
}

model DailyClosing {
  id             Int          @id @default(autoincrement())
  cashRegisterId Int
  userId         Int
  closingDate    DateTime     @default(now())
  expectedCash   Float
  actualCash     Float
  discrepancy    Float
  notes          String?
  cashRegister   CashRegister @relation(fields: [cashRegisterId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  description   String?
  parentId      Int? // For subcategories
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")
  products      Product[]  @relation("ProductCategories")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}
